
function map_logfile2network(logfile)
    netpath = string(@__DIR__, "/../networks")
    if contains(logfile, "mnist")
        netpath = string(netpath, "/mnist")
    elseif contains(logfile, "heloc")
        netpath = string(netpath, "/heloc")
    else
        throw(ArgumentError("Dataset not known for logfile $(logfile)"))
    end

    if contains(logfile, "mnist_256x4_1e4")
        netpath = string(netpath, "/mnist_256x4_1e4.onnx")
    elseif contains(logfile, "mnist_256x4_2e5")
        netpath = string(netpath, "/mnist_256x4_2e5.onnx")
    elseif contains(logfile, "mnist_256x6_1e4")
        netpath = string(netpath, "/mnist_256x6_1e4.onnx")
    elseif contains(logfile, "mnist_256x6_2e5")
        netpath = string(netpath, "/mnist_256x6_2e5.onnx")
    elseif contains(logfile, "mnist-net_256x4")
        netpath = string(netpath, "/mnist-net_256x4.onnx")
    elseif contains(logfile, "mnist-net_256x6")
        netpath = string(netpath, "/mnist-net_256x6.onnx")
    elseif contains(logfile, "heloc_2e5")
        netpath = string(netpath, "/heloc_2e5.onnx")
    elseif contains(logfile, "heloc")
        # has to be last of heloc checks, because of course "heloc_2e5" also contains substring "heloc"
        netpath = string(netpath, "/heloc.onnx")
    else
        throw(ArgumentError("Network not known for logfile $(logfile)"))
    end

    if !isfile(netpath)
        throw(ArgumentError("Network file $(netpath) not found"))
    end
    return netpath
end


"""
Extracts original and polynomially approximated networks and degrees from a logfile generated by the generate_poly_networks function.
"""
function extract_networks_and_degrees_from_generated_log(logfile)
    res = load(logfile)
    nn_polys = res["nets"]
    degrees = res["degrees"]
    nn_path = map_logfile2network(logfile)
    nn = load_network(nn_path)
    return nn, nn_polys, degrees
end


#function get_logfiles(path; file_filter="")
#    logfiles_generated = readdir(string(@__DIR__, "/../", path), join=true)
#    logfiles_generated = filter(x -> contains(x, file_filter), logfiles_generated)
#end


#function logfile2netname(logfile)
#    basename(map_logfile2network.(logfile))
#end